<div class="mx-auto max-w-full rounded-lg bg-white p-6 text-gray-500 shadow dark:bg-slate-900 dark:text-gray-300">
  <!-- Tabs -->
  <div class="mb-4 border-b border-gray-200 dark:border-slate-700">
    <ul class="flex text-sm font-medium">
      <li>
        <button
          class="px-4 py-2 hover:border-b-2 hover:border-blue-800 focus:outline-none"
          onclick="showTab('editorTab')"
          id="editorTabButton"
        >
          Editor
        </button>
      </li>
      <li class="ml-2">
        <button
          class="px-4 py-2 hover:border-b-2 hover:border-blue-800 focus:outline-none"
          onclick="showTab('previewTab')"
          id="previewTabButton"
        >
          Preview
        </button>
      </li>
      <li class="ml-auto justify-end border-b-2 border-red-800 hover:font-bold hover:border-red-500">
        <button id="save-button" class="px-4 py-2 focus:outline-none" onclick="save();">Save</button>
      </li>
    </ul>
  </div>

  <!-- Editor Tab -->
  <div id="editorTab">
    <h1 class="text-2xl">{{ .Entry.Title }}</h1>
    <textarea
      id="editor"
      class="h-full w-full bg-slate-900 text-gray-200"
	  >{{ .RawContent }}</textarea>
  </div>

  <!-- Preview Tab (initially hidden) -->
  <div id="previewTab" class="hidden">
    <h1 id="title" class="hidden text-3xl font-semibold text-black dark:text-white"></h1>
    <div id="tags" class="flex flex-wrap gap-y-2 py-2 tags"></div>
    <div id="author-block" class="py-2 hidden">
      <p class="text-sm text-gray-500 dark:text-gray-300">
        by <span id="author"></span>, <span id="date"></span>
      </p>
    </div>
    <div class="h-full w-full markdown-body" id="markdown-preview"></div>
  </div>
</div>

<script>
  // Global variables
  var editor = null;
  var editorInitialized = false;

  // Tabs
  function showTab(tabId) {
    // Hide both tabs
    document.getElementById('editorTab').classList.add('hidden');
    document.getElementById('previewTab').classList.add('hidden');

    // Show the selected tab
    document.getElementById(tabId).classList.remove('hidden');

    // (Optional) handle active tab styles:
    document.getElementById('editorTabButton').classList.remove('border-b-2', 'border-blue-500');
    document.getElementById('previewTabButton').classList.remove('border-b-2', 'border-blue-500');
    if (tabId === 'editorTab') {
      document.getElementById('editorTabButton').classList.add('border-b-2', 'border-blue-500');
    } else {
      document.getElementById('previewTabButton').classList.add('border-b-2', 'border-blue-500');
    }
  }
  // Show Editor tab by default on page load
  showTab('editorTab');

  // Initialize the editor (only once)
  function initEditor() {
    // If already initialized or no textarea present, do nothing.
    if (editorInitialized) return;
    const editorTextarea = document.getElementById('editor');
    if (!editorTextarea) return;

    editorInitialized = true;  // mark as done
    editor = CodeMirror.fromTextArea(editorTextarea, {
      mode: 'markdown',
      lineNumbers: true,
      lineWrapping: true,
      matchBrackets: true,
      theme: 'midnight'
    });
    editor.setSize('100%', '100%');
    editor.on('change', function() {
      sendMarkdown(editor.getValue(), '{{ .Entry.FileName }}');
    });
    // Send initial markdown
    sendMarkdown(editor.getValue(), '{{ .Entry.FileName }}');
  }

  // Listen for DOMContentLoaded (full page load)
  document.addEventListener('DOMContentLoaded', initEditor);

  // Listen for htmx:load (might fire multiple times if content is swapped in/out)
  document.addEventListener('htmx:load', initEditor);

  // Save function
  function save() {
    const content = editor.getValue();
    const fileName = '{{ .Entry.FileName }}';
    savePage(content, fileName);
  }
</script>
